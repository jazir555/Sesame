# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

from typing import List, Optional
from functools import partial

# Import the Gemma function from the component builders
from torchtune.models.gemma._component_builders import gemma, lora_gemma
from torchtune.modules import TransformerDecoder
from torchtune.models.gemma._tokenizer import GemmaTokenizer
from torchtune.modules.peft import LORA_ATTN_MODULES
from torchtune.data._prompt_templates import _TemplateType, _get_prompt_template

"""
Model builders build specific instantiations using component builders.
Below are the Gemma 3 builders for multiple parameter sizes:
1B, 2B, 4B, 7B, 12B, and 27B.

We also provide LoRA/QLoRA versions where relevant.
"""

#####################################################
# GEMMA BUILDERS
#####################################################

def gemma_1b() -> TransformerDecoder:
    """
    Builder for creating a Gemma 3 1B model initialized with default parameter values.

    Returns:
        TransformerDecoder: Instantiation of Gemma 1B model
    """
    return gemma(
        vocab_size=256_000,
        num_layers=12,
        num_heads=8,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=1024,
        intermediate_dim=4096,
        max_seq_len=32_768,  # Example 32K context window
        attn_dropout=0.0,
        norm_eps=1e-6,
    )

def gemma_2b() -> TransformerDecoder:
    """
    Builder for creating a Gemma 3 2B model initialized with default parameter values.

    Returns:
        TransformerDecoder: Instantiation of Gemma 2B model
    """
    return gemma(
        vocab_size=256_000,
        num_layers=18,
        num_heads=8,
        head_dim=256,
        num_kv_heads=1,
        embed_dim=2048,
        intermediate_dim=16384,
        max_seq_len=8192,
        attn_dropout=0.0,
        norm_eps=1e-6,
    )

def gemma_4b() -> TransformerDecoder:
    """
    Builder for creating a Gemma 3 4B model initialized with default parameter values.

    Returns:
        TransformerDecoder: Instantiation of Gemma 4B model
    """
    return gemma(
        vocab_size=256_000,
        num_layers=24,
        num_heads=16,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=2048,
        intermediate_dim=8192,
        max_seq_len=128_000,  # Example 128K context window
        attn_dropout=0.0,
        norm_eps=1e-6,
    )

def gemma_7b() -> TransformerDecoder:
    """
    Builder for creating a Gemma 3 7B model initialized with default parameter values.

    Returns:
        TransformerDecoder: Instantiation of Gemma 7B model
    """
    return gemma(
        vocab_size=256_000,
        num_layers=28,
        num_heads=16,
        head_dim=256,
        num_kv_heads=16,
        embed_dim=3072,
        intermediate_dim=24576,
        max_seq_len=8192,
        attn_dropout=0.0,
        norm_eps=1e-6,
    )

def gemma_12b() -> TransformerDecoder:
    """
    Builder for creating a Gemma 3 12B model initialized with default parameter values.

    Returns:
        TransformerDecoder: Instantiation of Gemma 12B model
    """
    return gemma(
        vocab_size=256_000,
        num_layers=36,
        num_heads=24,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=4096,
        intermediate_dim=16384,
        max_seq_len=128_000,
        attn_dropout=0.0,
        norm_eps=1e-6,
    )

def gemma_27b() -> TransformerDecoder:
    """
    Builder for creating a Gemma 3 27B model initialized with default parameter values.

    Returns:
        TransformerDecoder: Instantiation of Gemma 27B model
    """
    return gemma(
        vocab_size=256_000,
        num_layers=48,
        num_heads=32,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=8192,
        intermediate_dim=32768,
        max_seq_len=128_000,
        attn_dropout=0.0,
        norm_eps=1e-6,
    )

#####################################################
# GEMMA TOKENIZER
#####################################################

def gemma_tokenizer(
    path: str,
    max_seq_len: Optional[int] = None,
    prompt_template: Optional[_TemplateType] = None
) -> GemmaTokenizer:
    """
    Tokenizer for Gemma.

    Args:
        path (str): path to the tokenizer
        max_seq_len (Optional[int]): maximum sequence length for tokenizing a single list of messages,
            after which the input will be truncated. Default is None.
        prompt_template (Optional[_TemplateType]): optional specified prompt template.
            If a string, it is assumed to be the dotpath of a :class:`~torchtune.data.PromptTemplateInterface`
            class. If a dictionary, it is assumed to be a custom prompt template mapping role to the
            prepend/append tags.

    Returns:
        GemmaTokenizer: Instantiation of the Gemma tokenizer
    """
    return GemmaTokenizer(
        path=path,
        max_seq_len=max_seq_len,
        prompt_template=_get_prompt_template(prompt_template) if prompt_template is not None else None
    )

#####################################################
# LORA + QLORA BUILDERS
#####################################################

def lora_gemma_1b(
    lora_attn_modules: List[LORA_ATTN_MODULES],
    apply_lora_to_mlp: bool = False,
    lora_rank: int = 8,
    lora_alpha: float = 16,
    lora_dropout: float = 0.0,
    use_dora: bool = False,
    quantize_base: bool = False,
) -> TransformerDecoder:
    """
    Builder for creating a Gemma 1B model with LoRA enabled.
    """
    return lora_gemma(
        lora_attn_modules=lora_attn_modules,
        apply_lora_to_mlp=apply_lora_to_mlp,
        vocab_size=256_000,
        num_layers=12,
        num_heads=8,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=1024,
        intermediate_dim=4096,
        max_seq_len=32_768,
        attn_dropout=0.0,
        norm_eps=1e-6,
        lora_rank=lora_rank,
        lora_alpha=lora_alpha,
        lora_dropout=lora_dropout,
        use_dora=use_dora,
        quantize_base=quantize_base,
    )

def lora_gemma_2b(
    lora_attn_modules: List[LORA_ATTN_MODULES],
    apply_lora_to_mlp: bool = False,
    lora_rank: int = 8,
    lora_alpha: float = 16,
    lora_dropout: float = 0.0,
    use_dora: bool = False,
    quantize_base: bool = False,
) -> TransformerDecoder:
    """
    Builder for creating a Gemma 2B model with LoRA enabled.
    """
    return lora_gemma(
        lora_attn_modules=lora_attn_modules,
        apply_lora_to_mlp=apply_lora_to_mlp,
        vocab_size=256_000,
        num_layers=18,
        num_heads=8,
        head_dim=256,
        num_kv_heads=1,
        embed_dim=2048,
        intermediate_dim=16384,
        max_seq_len=8192,
        attn_dropout=0.0,
        norm_eps=1e-6,
        lora_rank=lora_rank,
        lora_alpha=lora_alpha,
        lora_dropout=lora_dropout,
        use_dora=use_dora,
        quantize_base=quantize_base,
    )

def lora_gemma_4b(
    lora_attn_modules: List[LORA_ATTN_MODULES],
    apply_lora_to_mlp: bool = False,
    lora_rank: int = 8,
    lora_alpha: float = 16,
    lora_dropout: float = 0.0,
    use_dora: bool = False,
    quantize_base: bool = False,
) -> TransformerDecoder:
    """
    Builder for creating a Gemma 4B model with LoRA enabled.
    """
    return lora_gemma(
        lora_attn_modules=lora_attn_modules,
        apply_lora_to_mlp=apply_lora_to_mlp,
        vocab_size=256_000,
        num_layers=24,
        num_heads=16,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=2048,
        intermediate_dim=8192,
        max_seq_len=128_000,
        attn_dropout=0.0,
        norm_eps=1e-6,
        lora_rank=lora_rank,
        lora_alpha=lora_alpha,
        lora_dropout=lora_dropout,
        use_dora=use_dora,
        quantize_base=quantize_base,
    )

def lora_gemma_7b(
    lora_attn_modules: List[LORA_ATTN_MODULES],
    apply_lora_to_mlp: bool = False,
    lora_rank: int = 8,
    lora_alpha: float = 16,
    lora_dropout: float = 0.0,
    use_dora: bool = False,
    quantize_base: bool = False,
) -> TransformerDecoder:
    """
    Builder for creating a Gemma 7B model with LoRA enabled.
    """
    return lora_gemma(
        lora_attn_modules=lora_attn_modules,
        apply_lora_to_mlp=apply_lora_to_mlp,
        vocab_size=256_000,
        num_layers=28,
        num_heads=16,
        head_dim=256,
        num_kv_heads=16,
        embed_dim=3072,
        intermediate_dim=24576,
        max_seq_len=8192,
        attn_dropout=0.0,
        norm_eps=1e-6,
        lora_rank=lora_rank,
        lora_alpha=lora_alpha,
        lora_dropout=lora_dropout,
        use_dora=use_dora,
        quantize_base=quantize_base,
    )

def lora_gemma_12b(
    lora_attn_modules: List[LORA_ATTN_MODULES],
    apply_lora_to_mlp: bool = False,
    lora_rank: int = 8,
    lora_alpha: float = 16,
    lora_dropout: float = 0.0,
    use_dora: bool = False,
    quantize_base: bool = False,
) -> TransformerDecoder:
    """
    Builder for creating a Gemma 12B model with LoRA enabled.
    """
    return lora_gemma(
        lora_attn_modules=lora_attn_modules,
        apply_lora_to_mlp=apply_lora_to_mlp,
        vocab_size=256_000,
        num_layers=36,
        num_heads=24,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=4096,
        intermediate_dim=16384,
        max_seq_len=128_000,
        attn_dropout=0.0,
        norm_eps=1e-6,
        lora_rank=lora_rank,
        lora_alpha=lora_alpha,
        lora_dropout=lora_dropout,
        use_dora=use_dora,
        quantize_base=quantize_base,
    )

def lora_gemma_27b(
    lora_attn_modules: List[LORA_ATTN_MODULES],
    apply_lora_to_mlp: bool = False,
    lora_rank: int = 8,
    lora_alpha: float = 16,
    lora_dropout: float = 0.0,
    use_dora: bool = False,
    quantize_base: bool = False,
) -> TransformerDecoder:
    """
    Builder for creating a Gemma 27B model with LoRA enabled.
    """
    return lora_gemma(
        lora_attn_modules=lora_attn_modules,
        apply_lora_to_mlp=apply_lora_to_mlp,
        vocab_size=256_000,
        num_layers=48,
        num_heads=32,
        head_dim=128,
        num_kv_heads=1,
        embed_dim=8192,
        intermediate_dim=32768,
        max_seq_len=128_000,
        attn_dropout=0.0,
        norm_eps=1e-6,
        lora_rank=lora_rank,
        lora_alpha=lora_alpha,
        lora_dropout=lora_dropout,
        use_dora=use_dora,
        quantize_base=quantize_base,
    )

# QLoRA partials
qlora_gemma_1b  = partial(lora_gemma_1b,  quantize_base=True)
qlora_gemma_2b  = partial(lora_gemma_2b,  quantize_base=True)
qlora_gemma_4b  = partial(lora_gemma_4b,  quantize_base=True)
qlora_gemma_7b  = partial(lora_gemma_7b,  quantize_base=True)
qlora_gemma_12b = partial(lora_gemma_12b, quantize_base=True)
qlora_gemma_27b = partial(lora_gemma_27b, quantize_base=True)

# QLoRA docstrings
qlora_gemma_1b.__doc__ = """
Builder for creating a Gemma 1B model with QLoRA enabled.
See `lora_gemma_1b` for arguments.
"""
qlora_gemma_2b.__doc__ = """
Builder for creating a Gemma 2B model with QLoRA enabled.
See `lora_gemma_2b` for arguments.
"""
qlora_gemma_4b.__doc__ = """
Builder for creating a Gemma 4B model with QLoRA enabled.
See `lora_gemma_4b` for arguments.
"""
qlora_gemma_7b.__doc__ = """
Builder for creating a Gemma 7B model with QLoRA enabled.
See `lora_gemma_7b` for arguments.
"""
qlora_gemma_12b.__doc__ = """
Builder for creating a Gemma 12B model with QLoRA enabled.
See `lora_gemma_12b` for arguments.
"""
qlora_gemma_27b.__doc__ = """
Builder for creating a Gemma 27B model with QLoRA enabled.
See `lora_gemma_27b` for arguments.
"""
